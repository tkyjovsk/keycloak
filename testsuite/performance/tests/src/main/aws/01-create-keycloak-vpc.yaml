AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create VPC for Keycloak tests: two availability zones, each with one public and one private subnet [based on a cloudonaut.io template]'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB
Parameters:
  ClassB:
    Description: 'Class B of the VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub 'Keycloak from CloudFormation stack ${AWS::StackName} - 10.${ClassB}.0.0/16'

  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Keycloak internal security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      -
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      -
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      -
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
  SGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SG
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SG

  SGRds:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: SG
    Properties:
      GroupDescription: Keycloak database security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref SG

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.${ClassB}.0.0/16'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetDc1Public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.11.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-1 public'
  SubnetDc1Private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.1.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-1 private'
  SubnetDc2Public:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.12.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-2 public'
  SubnetDc2Private:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '10.${ClassB}.2.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-2 private'
  EndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
      - !Ref RouteTableDc1Private
      - !Ref RouteTableDc2Private
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
  RouteTableDc1Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-1 Public'
  RouteTableDc1Private:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-1 Private'
  RouteTableDc2Public:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-2 Public'
  RouteTableDc2Private:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'DC-2 Private'
  RouteTableAssociationDc1Public:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetDc1Public
      RouteTableId: !Ref RouteTableDc1Public
  RouteTableAssociationDc1Private:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetDc1Private
      RouteTableId: !Ref RouteTableDc1Private
  RouteTableAssociationDc2Public:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetDc2Public
      RouteTableId: !Ref RouteTableDc2Public
  RouteTableAssociationDc2Private:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetDc2Private
      RouteTableId: !Ref RouteTableDc2Private
  RouteTablePublicDc1InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableDc1Public
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicDc2InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableDc2Public
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  SubnetNetworkAclAssociationDc1Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDc1Public
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationDc1Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDc1Private
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociationDc2Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDc2Public
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociationDc2Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetDc2Private
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
Outputs:
  AZs:
    Description: 'AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZDc1:
    Description: 'AZ of DC-1'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZ-Dc1'
  AZDc2:
    Description: 'AZ of DC-2'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZ-Dc2'
  ClassB:
    Description: 'Class B.'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  SubnetDc1Public:
    Description: 'Subnet DC-1 public.'
    Value: !Ref SubnetDc1Public
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDc1Public'
  SubnetDc1Private:
    Description: 'Subnet DC-1 private.'
    Value: !Ref SubnetDc1Private
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDc1Private'
  SubnetDc2Public:
    Description: 'Subnet DC-2 public.'
    Value: !Ref SubnetDc2Public
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDc2Public'
  SubnetDc2Private:
    Description: 'Subnet DC-2 private.'
    Value: !Ref SubnetDc2Private
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDc2Private'
  SecurityGroup:
    Description: 'VPC security group.'
    Value: !Ref SG
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  SecurityGroupRds:
    Description: 'RDS security group.'
    Value: !Ref SGRds
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupRds'
  RouteTableDc1Private:
    Description: 'Route table DC-1 private.'
    Value: !Ref RouteTableDc1Private
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableDc1Private'
  RouteTableDc2Private:
    Description: 'Route table DC-2 private.'
    Value: !Ref RouteTableDc2Private
    Export:
      Name: !Sub '${AWS::StackName}-RouteTableDc2Private'
