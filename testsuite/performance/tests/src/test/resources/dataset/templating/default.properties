dataset.name=DATASET

### IDM
# REALM
realm.realm=realm_${index}
realm.displayName=Realm ${index}
realm.enabled=true
realm.registrationAllowed=true
realm.accessTokenLifeSpan=60
realm.passwordPolicy=hashIterations(1)
#realm.passwordPolicy=hashIterations(27500)

# REALM ROLE
realmRole.name=role_${index?string("00")}_of_${realm.realm}
realmRole.description=Role ${index} of ${realm.displayName}

# CLIENT
client.clientId=client_${index?string("00")}_of_${realm.realm}
client.name=Client ${index} of ${realm.displayName}
client.description=Description of ${name}
client.rootUrl=
client.adminUrl=
client.baseUrl=http://clients.${realm.realm}.test/client_${index}
client.enabled=${indexBasedRandomBool(50)?c}
client.secret=secret_of_${clientId}
client.redirectUris=${baseUrl},http://load-balancing-domain.test/${clientId}
client.webOrigins=
client.protocol=openid-connect
client.publicClient=<#if index % 3 == 0>true<#else>false</#if>
client.bearerOnly=<#if index % 3 == 1>true<#else>false</#if>
client.authorizationServicesEnabled=${(!isPublicClient())?c}
#client.authorizationServicesEnabled=false
#client.authorizationServicesEnabled=<#if publicClient?c >false<#else>${indexBasedRandomBool(50)?c}</#if>
client.serviceAccountsEnabled=${authorizationServicesEnabled?c}

# CLIENT ROLE
clientRole.name=clientrole_${index?string("00")}_of_${client.clientId}
clientRole.description=Role ${index} of ${client.name}

# USER
user.username=user_${index?string("00")}_of_${realm.realm}
user.enabled=true
user.email=${username}@email.test
user.emailVerified=true
user.firstName=User_${index}
user.lastName=O'Realm_${realm.index}

credential.type=password
credential.value=password_${index}_of_${user.username}
credential.temporary=false

userAttribute.name=attribute_${index?string("00")}
#userAttribute.value=value_of_${name}
#userAttribute.value=value0_of_${name},value1_of_${name},value2_of_${name}
userAttribute.value=<#list 0..2 as i>value_${i}_of_${name}<#sep>,</#sep></#list>

group.name=group_${index?string("00")}_of ${realm.realm}

groupAttribute.name=attribute_${index?string("00")}
groupAttribute.value=<#list 0..2 as i>value_${i}_of_${name}<#sep>,</#sep></#list>


### AUTHZ
resourceServer.allowRemoteResourceManagement=false
#resourceServer.allowRemoteResourceManagement=${client.indexBasedRandomBool(20)?c}
resourceServer.policyEnforcementMode=ENFORCING

scope.name=scope_${index}_of_${resourceServer.clientId}
scope.displayName=Scope ${index} of ${resourceServer.clientId}

resource.name=resource_${index}_of_${resourceServer.clientId}
resource.displayName=Resource ${index} of ${resourceServer.clientId}
resource.uri=${resourceServer.client.baseUrl}/resource_${index}
resource.type=urn:${resourceServer.clientId}:resources:default
#resource.ownerManagedAccess=true
resource.ownerManagedAccess=${indexBasedRandomBool(50)?c}

rolePolicy.name=role_policy_${index}_of_${resourceServer.clientId}
rolePolicy.description=Role Policy ${index} of ${resourceServer.name}
rolePolicy.logic=POSITIVE
#rolePolicy.decisionStrategy=UNANIMOUS

rolePolicyRoleDefinition.required=${indexBasedRandomBool(50)?c}

jsPolicy.name=js_policy_${index}_of_${resourceServer.clientId}
jsPolicy.description=JavaScript Policy ${index} of ${resourceServer.name}
jsPolicy.code=// TODO add some JavaScript code\n// for JavaScript Policy ${index}\n// more\n// lines ...
jsPolicy.logic=POSITIVE

userPolicy.name=user_policy_${index}_of_${resourceServer.clientId}
userPolicy.description=User Policy ${index} of ${resourceServer.name}
userPolicy.logic=POSITIVE

clientPolicy.name=client_policy_${index}_of_${resourceServer.clientId}
clientPolicy.description=Client Policy ${index} of ${resourceServer.name}
clientPolicy.logic=POSITIVE

resourcePermission.name=resource_permission_${index}_of_${resourceServer.clientId}
resourcePermission.description=Resource Permisison ${index} of ${resourceServer.name}
resourcePermission.resourceType=<#if indexBasedRandomBool(50)>urn:${resourceServer.clientId}:resources:default<#else></#if>
resourcePermission.decisionStrategy=UNANIMOUS

scopePermission.name=scope_permission_${index}_of_${resourceServer.clientId}
scopePermission.description=Scope Permisison ${index} of ${resourceServer.name}
scopePermission.decisionStrategy=UNANIMOUS

